package chapter16;

import java.util.ArrayList;
import java.util.List;

// 람다 표현식 (Lambda Expression)
// : 함수형 인터페이스 구현에 사용, 자바 8에서 도입된 기능
// > 간결성, 함수형 프로그래밍 지원 등의 특징
// > 익명 클래스 대체하여 코드의 가독성 향상에 기여 

// = 기본 형태 =
// (매개변수1, 매개변수2, ...) -> { 실행할 코드 }

// 매개변수: 함수형 인터페이스에서 메서드와 동일한 매개변수를 사용
// 화살표: 매개변수와 실행할 코드의 구분
// 코드 블록: 증괄호 영역
// cf) 단일 표현식인 경우 중괄호 생략 가능

class Student {
	private String name;
	private int score;
	
	public Student(String name, int score) {
		this.name = name;
		this.score = score;
	}
	
	public String getName() {
		return name;
	}
	
	public int getScore() {
		return score;
	}
}

//인터페이스 정의 - 성적 계산
interface Grading {
	String calculateGrade(Student student); // 추상 메서드
}


public class C_Lambda01 {
	public static void main(String[] args) {
		List<Student> students = new ArrayList<Student>();
		students.add(new Student("이승아", 85));
		students.add(new Student("최연호", 75));
		students.add(new Student("안근수", 68));
		students.add(new Student("마홍준", 90));
		students.add(new Student("김순조", 97));
	}
}
